devtools::build()
?devtools::build_win
devtools::build_win(version = "R-devel")
library(bsplinePsd)
# Generate basis functions
x = seq(0, 1, length = 256)
knots = sort(c(0, runif(10), 1))
basis = dbspline(x, knots)
# Plot basis functions
plot(x, basis[1, ], type = "l", ylim = c(min(basis), max(basis)))
for (i in 2:nrow(basis)) lines(x, basis[i, ], col = i)
plot(x, basis[1, ], type = "l", ylim = c(min(basis), max(basis)), xlab = NULL)
x = seq(0, 1, length = 256)
knots = sort(c(0, runif(10), 1))
basis = dbspline(x, knots)
# Plot basis functions
plot(x, basis[1, ], type = "l", ylim = c(min(basis), max(basis)))
for (i in 2:nrow(basis)) lines(x, basis[i, ], col = i)
library(beyondWhittle)
library(bspec)
library(ggplot2)
library(grid)
library(gridExtra)
#ar.ex = c(0.9, -0.9, 0.9, -0.9)
ar.ex = 0.9
n = 256
data = arima.sim(n = n, model = list(ar = ar.ex))
data = data - mean(data)
plot(data)
spectrum(data)
lambda = seq(0, pi, length = n / 2 + 1)
truepsd = psd_arma(lambda, ar = ar.ex, ma = numeric(0))
ptm = proc.time()
mcmc = gibbs_NPC(data, 20000, 10000, 2, ar.order = 1)
proc.time() - ptm
pdgrm = empiricalSpectrum(data)$power
pdgrm = pdgrm / 2 / pi
# eta = mean(mcmc$eta)
# fparam = psd_arma(lambda, ar = mean(mcmc$rho), ma = numeric(0))
# f = mcmc$psd.mean
# c.eta = f / fparam ^ eta
eta = median(mcmc$eta)
fparam = psd_arma(lambda, ar = median(mcmc$rho), ma = numeric(0))
f = mcmc$psd.median
c.eta = f / fparam ^ eta
ggdata = data.frame(x = rep(lambda, 3),
y = c(f, fparam, c.eta),
name = c(rep("A", length(lambda)),
rep("B", length(lambda)),
rep("C", length(lambda))))
ggdata$f2 <- factor(ggdata$name, labels = c(expression(f(lambda)),
expression(f[param](lambda)^eta),
expression(c[eta](lambda))))
ggplot(ggdata, aes(x, y)) +
geom_line(linewidth = 2) +
#facet_wrap(~f2, nrow = 3, scales = "free_y", labeller = label_parsed) +
facet_wrap(~f2, nrow = 3, labeller = label_parsed) +
theme_bw() +
ylab("") +
xlab(expression(lambda)) +
theme(text = element_text(size=24))
eta
